[{"C:\\Users\\Dughes\\desktop\\homework\\train_of_thought\\thought\\src\\index.js":"1","C:\\Users\\Dughes\\desktop\\homework\\train_of_thought\\thought\\src\\App.js":"2","C:\\Users\\Dughes\\desktop\\homework\\train_of_thought\\thought\\src\\reportWebVitals.js":"3","C:\\Users\\Dughes\\desktop\\homework\\train_of_thought\\thought\\src\\utils\\sorting.js":"4","C:\\Users\\Dughes\\desktop\\homework\\train_of_thought\\thought\\src\\components\\box.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":4214,"mtime":1607905531065,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":1498,"mtime":1607900992250,"results":"10","hashOfConfig":"7"},{"size":652,"mtime":1607903523706,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1ksbjf3",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"C:\\Users\\Dughes\\desktop\\homework\\train_of_thought\\thought\\src\\index.js",[],["25","26"],"C:\\Users\\Dughes\\desktop\\homework\\train_of_thought\\thought\\src\\App.js",["27","28"],"C:\\Users\\Dughes\\desktop\\homework\\train_of_thought\\thought\\src\\reportWebVitals.js",[],"C:\\Users\\Dughes\\desktop\\homework\\train_of_thought\\thought\\src\\utils\\sorting.js",["29"],"export default function mergeSort(array) {\r\n  divide(array)\r\n  // console.log(array.length);\r\n  function divide(array) {\r\n    if (array.length < 2) {\r\n      return array;\r\n    } else {\r\n      const half = Math.floor(array.length / 2);\r\n      const left = array.slice(0, half);\r\n      const right = array.slice(half, array.length + 1);\r\n      return merge(divide(left), divide(right))\r\n    }\r\n  }\r\n  function merge(left, right) {\r\n    let buffer = []\r\n    const start = left[0].index;\r\n    const end = right[right.length - 1].index;\r\n    while (left.length !== 0 && right.length !== 0) {\r\n      if (left[0].value < right[0].value) {\r\n        buffer.push(left.shift())\r\n      } else {\r\n        buffer.push(right.shift())\r\n      }\r\n    }\r\n    while (left.length !== 0) {\r\n      buffer.push(left.shift())\r\n    }\r\n    while (right.length !== 0) {\r\n      buffer.push(right.shift())\r\n    }\r\n    for (let i = start, j = 0; i < end, j < buffer.length; j++, i++) {\r\n      // let colorDiv = document.getElementById(`${buffer[j].index}`)\r\n      // let barDiv = document.getElementById(`${i}`);\r\n      // let height = buffer[j].value;\r\n      buffer[j].index = i;\r\n      // setTimeout(() => {\r\n      //   colorDiv.style.backgroundColor = 'magenta'\r\n      //   setTimeout(() => {\r\n      //     colorDiv.style.backgroundColor = 'aqua'\r\n      //     barDiv.style.height = `${height}px`;\r\n      //   }, 50);\r\n      // }, j * 50);\r\n    }\r\n    array.splice(start, buffer.length, ...buffer);\r\n    return buffer;\r\n  }\r\n}","C:\\Users\\Dughes\\desktop\\homework\\train_of_thought\\thought\\src\\components\\box.js",["30"],"import React, { useRef } from 'react';\r\nimport { useFrame } from 'react-three-fiber';\r\n\r\nfunction Box({ position, newColor, edges, name, handleClick }) {\r\n  const mesh = useRef(null)\r\n  // useFrame(() => {\r\n  //   mesh.current.rotation.x = mesh.current.rotation.y = 0.01;\r\n  // })\r\n\r\n  return (\r\n    <mesh\r\n      position={position}\r\n      name={name}\r\n      ref={mesh}\r\n      userData={{ edges: edges, position: position, color: newColor }}\r\n      onClick={handleClick} >\r\n      <sphereBufferGeometry attach='geometry' args={[0.2, 500]} />\r\n      <meshStandardMaterial attach='material' color={newColor} />\r\n    </mesh>\r\n  )\r\n}\r\n\r\nexport default Box\r\n",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":1,"column":17,"nodeType":"37","messageId":"38","endLine":1,"endColumn":23},{"ruleId":"35","severity":1,"message":"39","line":3,"column":18,"nodeType":"37","messageId":"38","endLine":3,"endColumn":26},{"ruleId":"40","severity":1,"message":"41","line":31,"column":39,"nodeType":"42","messageId":"43","endLine":31,"endColumn":40},{"ruleId":"35","severity":1,"message":"39","line":2,"column":10,"nodeType":"37","messageId":"38","endLine":2,"endColumn":18},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useFrame' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-global-assign","no-unsafe-negation"]